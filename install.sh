#!/bin/bash

# Script de instala√ß√£o de depend√™ncias para Network Analyzer
# Este script instala todas as ferramentas e pacotes necess√°rios para executar
# network_analyzer.py e dashboard.py

set -e  # Para o script se algum comando falhar

echo "==============================================="
echo "Network Analyzer - Instala√ß√£o de Depend√™ncias"
echo "==============================================="

# Fun√ß√£o para verificar se o comando foi executado com sucesso
check_command() {
    if [ $? -eq 0 ]; then
        echo "‚úÖ $1 instalado com sucesso"
    else
        echo "‚ùå Erro ao instalar $1"
        exit 1
    fi
}

# Atualizar reposit√≥rios do sistema
echo "üîÑ Atualizando reposit√≥rios do sistema..."
sudo apt update
check_command "Atualiza√ß√£o dos reposit√≥rios"

# Instalar Python3 e pip se n√£o estiverem instalados
echo "üêç Verificando instala√ß√£o do Python3..."
if ! command -v python3 &> /dev/null; then
    sudo apt install -y python3 python3-pip
    check_command "Python3 e pip"
else
    echo "‚úÖ Python3 j√° est√° instalado"
fi

# Instalar ferramentas de rede necess√°rias
echo "üåê Instalando ferramentas de rede..."
sudo apt install -y \
    iputils-ping \
    iproute2 \
    wireless-tools \
    iw \
    net-tools \
    netcat-openbsd \
    mtr-tiny \
    dnsutils
check_command "Ferramentas de rede"

# Instalar MongoDB
echo "üóÑÔ∏è Instalando MongoDB..."
if ! command -v mongod &> /dev/null; then
    # Importar chave p√∫blica do MongoDB
    curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
    
    # Adicionar reposit√≥rio do MongoDB
    echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
    
    # Atualizar reposit√≥rios e instalar MongoDB
    sudo apt update
    sudo apt install -y mongodb-org
    
    # Iniciar e habilitar MongoDB
    sudo systemctl start mongod
    sudo systemctl enable mongod
    
    check_command "MongoDB"
else
    echo "‚úÖ MongoDB j√° est√° instalado"
    # Garantir que o MongoDB est√° rodando
    sudo systemctl start mongod
fi

# Instalar depend√™ncias Python
echo "üì¶ Instalando depend√™ncias Python..."

# Criar arquivo requirements.txt tempor√°rio
cat > /tmp/requirements.txt << EOF
pymongo>=4.0.0
requests>=2.25.0
flask>=2.0.0
numpy>=1.21.0
EOF

# Instalar depend√™ncias Python
pip3 install -r /tmp/requirements.txt
check_command "Depend√™ncias Python"

# Remover arquivo tempor√°rio
rm /tmp/requirements.txt

# Verificar se todas as ferramentas est√£o funcionando
echo "üîç Verificando instala√ß√µes..."

# Verificar ferramentas de rede
commands_to_check=(
    "ping"
    "ip"
    "iwconfig"
    "iw"
    "nc"
    "mtr"
    "nslookup"
)

for cmd in "${commands_to_check[@]}"; do
    if command -v $cmd &> /dev/null; then
        echo "‚úÖ $cmd dispon√≠vel"
    else
        echo "‚ùå $cmd n√£o encontrado"
    fi
done

# Verificar Python modules
echo "üêç Verificando m√≥dulos Python..."
python3 -c "
import sys
modules = ['pymongo', 'requests', 'flask', 'numpy', 'subprocess', 're', 'os', 'platform', 'statistics', 'datetime', 'threading', 'time']
missing = []
for module in modules:
    try:
        __import__(module)
        print(f'‚úÖ {module} dispon√≠vel')
    except ImportError:
        missing.append(module)
        print(f'‚ùå {module} n√£o encontrado')

if missing:
    print(f'M√≥dulos faltando: {missing}')
    sys.exit(1)
else:
    print('‚úÖ Todos os m√≥dulos Python est√£o dispon√≠veis')
"

# Verificar status do MongoDB
echo "üóÑÔ∏è Verificando status do MongoDB..."
if sudo systemctl is-active --quiet mongod; then
    echo "‚úÖ MongoDB est√° rodando"
else
    echo "‚ö†Ô∏è MongoDB n√£o est√° rodando. Tentando iniciar..."
    sudo systemctl start mongod
    if sudo systemctl is-active --quiet mongod; then
        echo "‚úÖ MongoDB iniciado com sucesso"
    else
        echo "‚ùå Erro ao iniciar MongoDB"
    fi
fi

# Criar diret√≥rio templates se n√£o existir (necess√°rio para o dashboard)
echo "üìÅ Criando diret√≥rio templates..."
mkdir -p templates
echo "‚úÖ Diret√≥rio templates criado"

# Verificar permiss√µes de rede (algumas ferramentas podem precisar de sudo)
echo "üîê Verificando permiss√µes..."
if [ "$EUID" -eq 0 ]; then
    echo "‚ö†Ô∏è Script executado como root. Algumas funcionalidades de rede podem funcionar melhor."
else
    echo "‚ÑπÔ∏è Script executado como usu√°rio normal. Algumas funcionalidades podem precisar de sudo."
fi

echo ""
echo "=========================================="
echo "‚úÖ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!"
echo "=========================================="
echo ""
echo "üìã Resumo das instala√ß√µes:"
echo "‚Ä¢ Ferramentas de rede: ping, ip, iwconfig, iw, nc, mtr, nslookup"
echo "‚Ä¢ MongoDB: Instalado e configurado"
echo "‚Ä¢ Python: pymongo, requests, flask, numpy"
echo ""
echo "üöÄ Para executar os scripts:"
echo "‚Ä¢ Network Analyzer: python3 network_analyzer.py"
echo "‚Ä¢ Dashboard: python3 dashboard.py"
echo ""
echo "üåê Dashboard ser√° acess√≠vel em: http://localhost:5000"
echo ""
echo "‚ö†Ô∏è IMPORTANTE:"
echo "‚Ä¢ Certifique-se de ter uma interface de rede wireless ativa"
echo "‚Ä¢ Algumas funcionalidades podem precisar de privil√©gios sudo"
echo "‚Ä¢ O MongoDB precisa estar rodando para salvar os dados"
echo ""
